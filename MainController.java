package com.example.rest.service.my;


import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    @Autowired
    private DeveloperRepository developerRepository;

    @Autowired
    private TeamRepository teamRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody RequestDtoForTeamCreation requestDtoForTeamCreation) {

        Team team=requestDtoForTeamCreation.getTeam();
        String teamId=getRandomString();
        team.setId(teamId);
        teamRepository.save(team);

        List<Developer> developers=requestDtoForTeamCreation.getDevelopers();

        for(int i=0;i<developers.size();i++) {
            Developer developer = developers.get(i);
            String developerId = getRandomString();
            developer.setId(developerId);
            developer.setTeamId(teamId);
            developerRepository.save(developer);
        }
        return "Saved";
    }

    @PostMapping(path="/notify") // Map ONLY POST Requests
    public @ResponseBody String notifyDeveloper (@RequestBody String id) throws IOException {

        List<Developer> developers = (List<Developer>) developerRepository.findAll();
        while(developers.iterator().hasNext()){
            Developer developer1=developers.iterator().next();
            if(developer1.getId().equalsIgnoreCase(id)){
                sendPost(developer1.getPhoneNumber());
                return "done";
            }

        }
        return "not done";

    }


//
//    POST https://run.mocky.io/v3/fd99c100-f88a-4d70-aaf7-393dbbd5d99f
//    Sample request: {"phone_number": "9999999999", "message": "Too many 5xx!"}

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }


    private void sendPost(String phoneNumber) throws IOException {

        // form parameters
        FormBody formBody = new FormBody.Builder()
                .add("phoneNumber", phoneNumber)
                .add("message","Too many 5XX!")
                .build();

        Request request = new Request.Builder()
                .url("https://run.mocky.io/v3/fd99c100-f88a-4d70-aaf7-393dbbd5d99f")
                .post(formBody)
                .build();


        OkHttpClient httpClient = new OkHttpClient();

        try (Response response = httpClient.newCall(request).execute()) {

            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);

            // Get response body
            System.out.println(response.body().string());
        }
    }

    public String getRandomString() {
        String upperAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lowerAlphabet = "abcdefghijklmnopqrstuvwxyz";
        String numbers = "0123456789";

        // combine all strings
        String alphaNumeric = upperAlphabet + lowerAlphabet + numbers;

        // create random string builder
        StringBuilder sb = new StringBuilder();

        // create an object of Random class
        Random random = new Random();

        // specify length of random string
        int length = 10;

        for (int i = 0; i < length; i++) {

            // generate random index number
            int index = random.nextInt(alphaNumeric.length());

            // get character specified by index
            // from the string
            char randomChar = alphaNumeric.charAt(index);

            // append the character to string builder
            sb.append(randomChar);
        }

        String randomString = sb.toString();
        System.out.println("Random String is: " + randomString);
        return randomString;
    }

}
